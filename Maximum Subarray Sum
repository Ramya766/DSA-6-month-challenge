Brute:
import java.lang.Math;
class Main{
    public static void main(String[] args){
        int arr[]={-2,-3,4,-1,-2,1,5,-1};
        int n=8;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
              sum+=arr[j];
            
            if(sum>max){
                max=sum;
            }
            }
        }
        System.out.print(max);
    }
  
    }
TC:O(n^2)
SC:O(1)

Optimal:
import java.lang.Math;
class Main{
    public static void main(String[] args){
        int arr[]={-2,-3,4,-1,-2,1,5,-1};
        int n=8;
        int sum=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(max<sum){
                max=sum;
            }
            if(sum<0){
                sum=0;
            }
        }
        System.out.print(max);
    }
  
    }
TC:O(n)
SC:O(1)

2nd approach:to print that subarray
import java.lang.Math;
class Main {
	public static void main(String[] args) {
		int arr[]= {-2,-3,4,-1,-2,1,5,-1};
		int n=8;
		int sum=0;
		int ansstart=-1;
		int ansend=-1;
		int start=0;
		int max=Integer.MIN_VALUE;
		for(int i=0; i<n; i++) {
			if(sum==0) {
				start=i;
			}
			sum+=arr[i];
			if(max<sum) {
				max=sum;
				ansstart=start;
				ansend=i;

			}
			if(sum<0) {
				sum=0;
			}
		}
		System.out.println(max);
		System.out.print("[");
		for (int i = ansstart; i <= ansend; i++) {
			System.out.print(arr[i]);
			if (i != ansend) {
				System.out.print(", ");
			}
		}
		System.out.print("]");
		
	}

}
output:
7
[4, -1, -2, 1, 5]
TC:O(N)
SC:O(1)

