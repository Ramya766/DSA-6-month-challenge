Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

import java.util.*;
class MyStack {
    private Queue <Integer>q1;
    private Queue <Integer>q2;
    public MyStack() {
        q1=new LinkedList<>();
        q2=new LinkedList<>();
    }
    
    public void push(int x) {
        q2.add(x);
        while(!q1.isEmpty()){
             q2.add(q1.remove());
        }
        Queue <Integer> temp=q1;
        q1=q2;
        q2=temp;
    }
    
    public int pop() {
        if(q1.isEmpty()) throw new NoSuchElementException();
        return q1.remove();
    }
    
    public int top() {
        if(q1.isEmpty()) throw new NoSuchElementException();
        return q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
}

TC=O(n)
SC=O(1)
