Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Optimal solution:
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
         ListNode dummy=new ListNode(0);
         dummy.next=head;
         ListNode leftpre=dummy;
         ListNode temp=head;
         for(int i=0;i<left-1;i++){
            leftpre=leftpre.next;
            temp=temp.next;
         }
         ListNode subhead=temp;
         ListNode prev=null;
         for(int i=0;i<right-left+1;i++){
            ListNode front=temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;
         }
         leftpre.next=prev;
         subhead.next=temp;
         return dummy.next;

    }
}

Tc:O(n)
SC=O(1)
