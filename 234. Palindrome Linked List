
Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
Example 1:
Input: head = [1,2,2,1]
Output: true
Example 2:
Input: head = [1,2]
Output: false

Optimal solution:
class Solution {
     private static ListNode reverselist(ListNode head){
        ListNode temp=head;
        ListNode prev=null;
        while(temp!=null){
            ListNode front=temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
        }
    public boolean isPalindrome(ListNode head) {
       ListNode fast=head;
       ListNode slow=head;
       while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
       }
       if(fast!=null){
        slow=slow.next;
       }
       slow=reverselist(slow);
       fast=head;
       while(slow!=null){
        if(fast.val!=slow.val){
            return false;
        }
        slow=slow.next;
        fast=fast.next;
       }
       return true;
    }
}

TC=O(n)
Sc=O(1)
