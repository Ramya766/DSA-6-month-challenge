Brute:
import java.lang.Math;
public class Main{
    public static void main(String[] args){
        int arr[]={1,2,3,1,1,1,1,4,2,3};
        int n=10;
        int N=3;
          int len=0;
        for(int i=0;i<n;i++){
             int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==N){
                  
                    len=Math.max(len,j-i+1);
                }
            }
        }
        System.out.print(len);
    }
}
TC=O(N^2)
SC=O(1)

Optimal:
import java.lang.Math;
public class Main{
    public static void main(String[] args){
        int arr[]={1,2,3,1,1,1,1,4,2,3};
        int n=10;
        int k=3;
        int left=0;
        int right=0;
        int sum=0;
        int maxlen=0;
        while(right<n){
            sum+=arr[right];
        
        while(sum>k&&left<=right){
            sum-=arr[left];
            left++;
        }
        if(sum==k){
            maxlen=Math.max(maxlen,right-left+1);
        }
        right++;
        }
        System.out.print(maxlen);
        
    }
}
TC=O(2N)
SC=O(1)
